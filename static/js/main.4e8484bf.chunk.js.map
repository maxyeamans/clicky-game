{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","react_default","a","createElement","className","message","concat","score","Card","src","source","alt","id","key","onClick","handleClick","App","state","heroes","_this","clickedIndex","findIndex","hero","clicked","console","log","setState","forEach","newHeroes","shuffleArray","array","i","length","j","Math","floor","random","temp","_this2","this","components_Jumbotron_Jumbotron","map","components_Card_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ytBAceA,eAXG,SAACC,GAAD,OAIdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,SACXJ,EAAAC,EAAAC,cAAA,2BAAAG,OAAsBN,EAAMO,kBCQrBC,SAfF,SAACR,GAAD,OAITC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACXH,EAAAC,EAAAC,cAAA,OACIC,UAAU,YACVK,IAAK,mBAAqBT,EAAMU,OAAS,OACzCC,IAAKX,EAAMU,OACXE,GAAIZ,EAAMY,GACVC,IAAKb,EAAMY,GACXE,QAAU,kBAAMd,EAAMe,YAAYf,EAAMY,UCuErCI,6MA7EbC,MAAQ,CACNC,OAAQA,EACRX,MAAO,EACPF,QAAS,oDAGXU,YAAc,SAAAH,GAGZ,IAAIM,EAASC,EAAKF,MAAMC,OAElBE,EAAeF,EAAOG,UAAU,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,IAEpDU,EAAOJ,EAAOE,IAEC,IAAjBE,EAAKC,SACPC,QAAQC,IAAR,GAAAnB,OAAegB,EAAKZ,OAApB,8BAEAY,EAAKC,SAAU,EAEfJ,EAAKO,SAAS,CAEZnB,MAAQY,EAAKF,MAAMV,MAAQ,EAC3BF,QAAO,UAAAC,OAAYgB,EAAKZ,OAAjB,iCAITc,QAAQC,IAAR,GAAAnB,OAAegB,EAAKZ,OAApB,+BAEAQ,EAAOS,QAAS,SAAAL,GAAI,OAAIA,EAAKC,SAAU,IACvCJ,EAAKO,SAAS,CACZnB,MAAO,EACPF,QAAO,mCAAAC,OAAqCgB,EAAKZ,OAA1C,mBAIX,IAAMkB,EAAYT,EAAKU,aAAaX,GACpCC,EAAKO,SAAS,CACZR,OAAQU,OAIZC,aAAe,SAAAC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,2EAGA,IAAAQ,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqC,EAAD,CACEnC,QAASkC,KAAKtB,MAAMZ,QACpBE,MAAOgC,KAAKtB,MAAMV,QAEpBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZmC,KAAKtB,MAAMC,OAAOuB,IAAI,SAAAnB,GAAI,OACzBrB,EAAAC,EAAAC,cAACuC,EAAD,CACEhC,OAAQY,EAAKZ,OACbC,IAAKW,EAAKZ,OACVE,GAAIU,EAAKV,GACTC,IAAKS,EAAKV,GACVG,YAAauB,EAAKvB,0BArEhB4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4e8484bf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Jumbotron.css\";\n\nconst Jumbotron = (props) => (\n    // <div className=\"card col-lg-3 col-md-4 col-sm-2\">\n    //     {<img src={\"./assets/images/\" + props.source + \".png\"} alt={props.source} id={props.id} key={props.id} />}\n    // </div>\n    <div className=\"jumbotron\">\n        <h1>Clicky Game</h1>\n        <h3>{props.message}</h3>\n        <p>{`Current score: ${props.score}`}</p>\n    </div>\n)\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = (props) => (\n    // <div className=\"card col-lg-3 col-md-4 col-sm-2\">\n    //     {<img src={\"./assets/images/\" + props.source + \".png\"} alt={props.source} id={props.id} key={props.id} />}\n    // </div>\n    <div className=\"col-lg-3 col-md-3 col-sm-6 col-6\">\n        <img\n            className=\"img-fluid\"\n            src={\"./assets/images/\" + props.source + \".png\" }\n            alt={props.source}\n            id={props.id}\n            key={props.id}\n            onClick={ () => props.handleClick(props.id) } />\n    </div>\n)\n\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\"\nimport heroes from \"./heroes.json\";\nimport Card from \"./components/Card\";\n\nclass App extends Component {\n\n  state = {\n    heroes: heroes,\n    score: 0,\n    message: \"Click a hero to start. Try to click only once!\"\n  }\n\n  handleClick = id => {\n\n    // Mirror state to the function\n    let heroes = this.state.heroes;\n    // Get the index of the clicked card in the current state's array\n    const clickedIndex = heroes.findIndex(hero => hero.id === id);\n    // Make it easier to get to this clicked card\n    const hero = heroes[clickedIndex];\n    // Check to see if that card has been clicked yet\n    if (hero.clicked === false) {\n      console.log(`${hero.source} hasn't been clicked yet.`);\n      // Set the card to be clicked\n      hero.clicked = true;\n      // Set the card's clicked status in state to true\n      this.setState({\n        // heroes: heroes,\n        score: (this.state.score + 1),\n        message: `Noice, ${hero.source} hadn't been clicked yet.`\n      });\n    }\n    else {\n      console.log(`${hero.source} has already been clicked!`);\n      // ! Delete the line below if it breaks the game\n      heroes.forEach( hero => hero.clicked = false);\n      this.setState({\n        score: 0,\n        message: `Bummer, you had already clicked ${hero.source}. Try again!`\n      });\n    }\n    // Randomize the array\n    const newHeroes = this.shuffleArray(heroes);\n    this.setState({\n      heroes: newHeroes\n    })\n  };\n\n  shuffleArray = array => {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron\n          message={this.state.message}\n          score={this.state.score} \n        />\n        <div className=\"container mb-5\">\n          <div className=\"row\">\n            {this.state.heroes.map(hero => (\n              <Card\n                source={hero.source}\n                alt={hero.source}\n                id={hero.id}\n                key={hero.id}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}